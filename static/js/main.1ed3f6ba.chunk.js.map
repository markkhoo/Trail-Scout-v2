{"version":3,"sources":["components/trailCard.tsx","utils/localStorageHelper.tsx","pages/home.tsx","pages/trail.tsx","pages/notFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TrailCard","x","id","name","difficulty","rating","className","style","display","padding","fontWeight","borderRadius","backgroundColor","textDecoration","transform","ratingToPercent","to","LocalStorageService","key","value","localStorage","setItem","JSON","stringify","otherwise","data","getItem","parse","LocationPin","text","icon","arrowUpLeft","Home","useState","lat","lng","getCoord","setCoord","setTimeout","getTimer","setTimer","lon","getTrail","setTrail","getShown","setShown","getPages","setPages","getPageN","setPageN","useEffect","service","searchTrails","then","res","catch","err","console","error","maxPages","Math","ceil","length","pageNumbers","i","push","currentPageNumber","displayTrails","j","fetch","response","json","bootstrapURLKeys","defaultCenter","center","defaultZoom","zoom","onDragEnd","map","parseFloat","toFixed","clearTimeout","timer","searchAfterTime","onZoomAnimationEnd","item","onClick","maxPage","pageNext","TrailDetail","trailID","useParams","trailsID","city","undefined","country","description","directions","features","region","thumbnail","url","daily","timezone","timezone_offset","getWeather","setWeather","searchTrailByID","searchWeather","window","location","assign","stringReplaceBrake","replace","timeConverter","UNIX_timestamp","a","Date","date","getDate","day","getDay","src","alt","width","height","textAlign","href","target","rel","fontSize","dt","weather","temp","max","floor","min","PageNotFound","flexDirection","justifyContent","color","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ed3f6ba.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./trailCard.css\";\r\n\r\ntype CardProps = {\r\n    id: number;\r\n    name: string;\r\n    difficulty: string;\r\n    rating: number;\r\n}\r\n\r\nconst TrailCard: FC<CardProps> = ({ id, name, difficulty, rating }) => {\r\n    const difficultyStyle = (x: string) => {\r\n        if (x === \"Easiest\") {\r\n            return ({\r\n                padding: \"0.125em 2em\",\r\n                fontWeight: 600,\r\n                borderRadius: \"1.5em\",\r\n                backgroundColor: \"rgb(20,221,240)\"\r\n            })\r\n        } else if (x === \"Beginner\") {\r\n            return ({\r\n                padding: \"0.125em 2em\",\r\n                fontWeight: 600,\r\n                borderRadius: \"1.5em\",\r\n                backgroundColor: \"rgb(45,247,51)\"\r\n            })\r\n        } else if (x === \"Intermediate\") {\r\n            return ({\r\n                padding: \"0.125em 2em\",\r\n                fontWeight: 600,\r\n                borderRadius: \"1.5em\",\r\n                backgroundColor: \"rgb(224,210,51)\"\r\n            })\r\n        } else if (x === \"Advanced\") {\r\n            return ({\r\n                padding: \"0.125em 2em\",\r\n                fontWeight: 600,\r\n                borderRadius: \"1.5em\",\r\n                backgroundColor: \"rgb(247,148,45)\"\r\n            })\r\n        } else if (x === \"Expert\") {\r\n            return ({\r\n                padding: \"0.125em 2em\",\r\n                fontWeight: 600,\r\n                borderRadius: \"1.5em\",\r\n                backgroundColor: \"rgb(240,41,70)\"\r\n            })\r\n        } else {\r\n            return ({ textDecoration: \"none\" })\r\n        }\r\n    }\r\n\r\n    const ratingToPercent = (x: number) => {\r\n        const result: number = (x * 20) - 100;\r\n        return `${result}%`\r\n    }\r\n\r\n    return (\r\n        <div className=\"trailCard\">\r\n            <h3>{name}</h3>\r\n            <div style={{ display: \"inline-block\" }}>\r\n                <p style={difficultyStyle(difficulty)}>{difficulty}</p>\r\n                <div className=\"rating-bar\">\r\n                    <span\r\n                        className=\"bar\"\r\n                        style={{ transform: `translate(${ratingToPercent(rating)},0px)` }}\r\n                    />\r\n                    <p className=\"rating-bar-text\">Rating: {rating}</p>\r\n                </div>\r\n                <Link\r\n                    className=\"trailCard-link\"\r\n                    to={`/trail/${id}`}\r\n                >Details</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrailCard;","class LocalStorageService {\r\n    static setItem(key: string, value: any): void {\r\n        localStorage.setItem(key, JSON.stringify({ value }));\r\n    }\r\n    static getItem<T>(key: string): T | null;\r\n    static getItem<T>(key: string, otherwise: T): T;\r\n    static getItem<T>(key: string, otherwise?: T): T | null {\r\n        const data: string | null = localStorage.getItem(key);\r\n        if (data !== null) {\r\n            return JSON.parse(data).value;\r\n        }\r\n        if (otherwise) {\r\n            return otherwise;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default LocalStorageService","import React, { FC, useEffect, useState } from 'react';\r\nimport TrailCard from '../components/trailCard';\r\nimport service from '../utils/localStorageHelper';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { Icon } from '@iconify/react';\r\nimport arrowUpLeft from '@iconify/icons-akar-icons/arrow-up-left';\r\nimport \"./home.css\";\r\n\r\ntype PinPoint = {\r\n    lat: number;\r\n    lng: number;\r\n    text?: string;\r\n}\r\n\r\ntype TrailData = {\r\n    city?: string;\r\n    country?: string;\r\n    description?: string;\r\n    difficulty: string;\r\n    directions?: string;\r\n    features?: string;\r\n    id: number;\r\n    lat: string;\r\n    length?: string;\r\n    lon: string;\r\n    name: string;\r\n    rating: number;\r\n    region?: string;\r\n    thumbnail?: string;\r\n    url?: string\r\n}\r\n\r\nconst LocationPin: FC<PinPoint> = ({ text }) => (\r\n    <div className=\"pin\">\r\n        <Icon icon={arrowUpLeft} className=\"pin-icon\" />\r\n        <p className=\"pin-text\">{text}</p>\r\n    </div>\r\n)\r\n\r\nfunction Home() {\r\n    const [getCoord, setCoord] = useState<PinPoint>({ lat: 37.42216, lng: -122.08427 });\r\n    const [getTimer, setTimer] = useState<NodeJS.Timeout>(setTimeout(() => { }, 0));\r\n    const [getTrail, setTrail] = useState<TrailData[]>([{ id: -1, lat: '0', lon: '0', name: '', difficulty: \"\", rating: 0 }]);\r\n    const [getShown, setShown] = useState<TrailData[]>([{ id: -1, lat: '0', lon: '0', name: '', difficulty: \"\", rating: 0 }]);\r\n    const [getPages, setPages] = useState<number[]>([1]);\r\n    const [getPageN, setPageN] = useState<number>(1);\r\n\r\n    useEffect(() => {\r\n        if (!localStorage.getItem(\"TrailApp_lat\") || !localStorage.getItem(\"TrailApp_lng\")) {\r\n            service.setItem('TrailApp_lat', getCoord.lat);\r\n            service.setItem('TrailApp_lng', getCoord.lng);\r\n            service.setItem('TrailApp_zoom', 12);\r\n        };\r\n\r\n        const lat: number = service.getItem<number>('TrailApp_lat', 0);\r\n        const lng: number = service.getItem<number>('TrailApp_lng', 0);\r\n\r\n        setCoord({ lat: lat, lng: lng });\r\n\r\n        searchTrails(lat, lng).then(res => {\r\n            if (res) {\r\n                setTrail(res)\r\n            }\r\n        }).catch(err => console.error(err))\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const maxPages: number = Math.ceil(getTrail.length / 8);\r\n        let pageNumbers: number[] = [];\r\n        for (let i = 1; i <= maxPages; i++) {\r\n            pageNumbers.push(i)\r\n        };\r\n        setPages(pageNumbers);\r\n        setPageN(1);\r\n    }, [getTrail]);\r\n\r\n    useEffect(() => {\r\n        const currentPageNumber: number = getPageN;\r\n        let displayTrails: TrailData[] = [];\r\n        for (let j = (currentPageNumber - 1) * 8; j < currentPageNumber * 8; j++) {\r\n            if (getTrail[j]) {\r\n                displayTrails.push(getTrail[j])\r\n            }\r\n        }\r\n        setShown(displayTrails);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getPages, getPageN]);\r\n\r\n    const goToPage = (input: number) => {\r\n        setPageN(input)\r\n        return\r\n    };\r\n\r\n    const pagePrev = () => {\r\n        const currentPageNumber: number = getPageN;\r\n        if (getPageN > 1) {\r\n            setPageN(currentPageNumber - 1)\r\n        };\r\n        return\r\n    };\r\n\r\n    const pageNext = () => {\r\n        const maxPage: number = getPages.length;\r\n        const currentPageNumber: number = getPageN;\r\n        if (getPageN < maxPage) {\r\n            setPageN(currentPageNumber + 1)\r\n        };\r\n        return\r\n    };\r\n\r\n    const clearSearchAfterTime = () => {\r\n        // console.log(typeof getTimer, getTimer);\r\n        clearTimeout(getTimer)\r\n        return\r\n    }\r\n\r\n    const searchTrails = (\r\n        lat: number,\r\n        lng: number\r\n    ): Promise<TrailData[]> => fetch(`https://trailapi-trailapi.p.rapidapi.com/trails/explore/?lat=${lat}&lon=${lng}&per_page=${64}&radius=${100}`, {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": \"trailapi-trailapi.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": `${'ab399b1f67mshf2552c3222ba6dfp1221c8jsn63f6ccf2572f'}`\r\n        }\r\n    })\r\n        .then((response) => response.json())\r\n        .then((res) => res.data as TrailData[]);\r\n\r\n    const searchAfterTime = () => {\r\n        let timer: NodeJS.Timeout = setTimeout(() => {\r\n\r\n            searchTrails(getCoord.lat, getCoord.lng).then(res => {\r\n                if (res) {\r\n                    setTrail(res)\r\n                }\r\n            }).catch(err => console.error(err))\r\n\r\n        }, 2250);\r\n        setTimer(timer);\r\n        return\r\n    };\r\n\r\n    return (<>\r\n        <div className=\"MapContainer\">\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: `${'AIzaSyDTHB9JTUl-71YWUybeheSoTwrLN8X82ok'}` }}\r\n                defaultCenter={{ lat: 37.42216, lng: -122.08427 }}\r\n                center={{ lat: getCoord.lat, lng: getCoord.lng }}\r\n                defaultZoom={12}\r\n                zoom={service.getItem('TrailApp_zoom', 12)}\r\n                onDragEnd={(map) => {\r\n                    setCoord({\r\n                        lat: parseFloat(map.center.lat().toFixed(5)),\r\n                        lng: parseFloat(map.center.lng().toFixed(5))\r\n                    });\r\n                    service.setItem('TrailApp_lat', parseFloat(map.center.lat().toFixed(5)));\r\n                    service.setItem('TrailApp_lng', parseFloat(map.center.lng().toFixed(5)));\r\n\r\n                    clearSearchAfterTime();\r\n                    searchAfterTime();\r\n\r\n                }}\r\n                onZoomAnimationEnd={(map) => {\r\n                    service.setItem('TrailApp_zoom', map)\r\n                }}\r\n            >\r\n                {getTrail &&\r\n                    getTrail.map(item => {\r\n                        return (\r\n                            <LocationPin\r\n                                lat={parseFloat(item.lat)}\r\n                                lng={parseFloat(item.lon)}\r\n                                text={item.name}\r\n                            />\r\n                        )\r\n                    })\r\n\r\n                }\r\n            </GoogleMapReact>\r\n        </div>\r\n        <div className=\"resultParent\">\r\n            <div className=\"resultHeader\">\r\n                <h2>Results</h2>\r\n            </div>\r\n            <div className=\"resultContainer\">\r\n                {getShown &&\r\n                    getShown.map(item => {\r\n                        return (\r\n                            <TrailCard\r\n                                key={item.id}\r\n                                id={item.id}\r\n                                name={item.name}\r\n                                difficulty={item.difficulty}\r\n                                rating={item.rating}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div className=\"resultPagination\">\r\n                <button\r\n                    className=\"resultButton buttonPrev\"\r\n                    onClick={() => { pagePrev() }}\r\n                >PREV</button>\r\n                {getPages &&\r\n                    getPages.map(item => {\r\n                        return (\r\n                            <button\r\n                                key={item}\r\n                                className={`resultButton ${(item === getPageN) ? \"buttonCurrent\": \"\"}`}\r\n                                onClick={() => { goToPage(item) }}\r\n                            >{`${item}`}</button>\r\n                        )\r\n                    })\r\n                }\r\n                <button\r\n                    className=\"resultButton buttonNext\"\r\n                    onClick={() => { pageNext() }}\r\n                >NEXT</button>\r\n            </div>\r\n        </div>\r\n    </>);\r\n}\r\n\r\nexport default Home","import React, { FC, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { Icon } from '@iconify/react';\r\nimport arrowUpLeft from '@iconify/icons-akar-icons/arrow-up-left';\r\nimport \"./trail.css\";\r\n\r\ntype TrailID = {\r\n    trailsID: string\r\n};\r\n\r\ntype SingleTrail = {\r\n    city?: string;\r\n    country?: string;\r\n    description?: string;\r\n    difficulty?: string;\r\n    directions?: string;\r\n    features?: string;\r\n    id?: number;\r\n    lat: string | undefined;\r\n    length?: string;\r\n    lon: string | undefined;\r\n    name?: string;\r\n    rating?: number;\r\n    region?: string;\r\n    thumbnail?: string;\r\n    url?: string\r\n};\r\n\r\ntype WeatherSub = {\r\n    description: string;\r\n    icon: string;\r\n    id: number;\r\n    main: string\r\n};\r\n\r\ntype DailyWeather = {\r\n    clouds: number;\r\n    dew_point: number;\r\n    dt: number;\r\n    feels_like: {\r\n        day: number,\r\n        eve: number,\r\n        morn: number,\r\n        night: number\r\n    };\r\n    humidity: number;\r\n    moon_phase: number;\r\n    moonrise: number;\r\n    moonset: number;\r\n    pop: number;\r\n    pressure: number;\r\n    sunrise: number;\r\n    sunset: number;\r\n    temp: {\r\n        day: number;\r\n        eve: number;\r\n        max: number;\r\n        min: number;\r\n        morn: number;\r\n        night: number;\r\n    };\r\n    uvi: number;\r\n    weather: WeatherSub[];\r\n    wind_deg: number;\r\n    wind_gust: number;\r\n    wind_speed: number\r\n};\r\n\r\ntype Weather = {\r\n    daily: DailyWeather[];\r\n    lat: number;\r\n    lon: number;\r\n    timezone: string;\r\n    timezone_offset: number\r\n}\r\n\r\ntype PinPoint = {\r\n    lat: number;\r\n    lng: number;\r\n    text?: string;\r\n}\r\n\r\nconst LocationPin: FC<PinPoint> = ({ text }) => (\r\n    <div className=\"pin\">\r\n        <Icon icon={arrowUpLeft} className=\"pin-icon\" />\r\n        <p className=\"pin-text\">{text}</p>\r\n    </div>\r\n)\r\n\r\nfunction TrailDetail() {\r\n    const trailParam: TrailID = useParams()\r\n    const trailID: string = trailParam.trailsID;\r\n\r\n    const [getTrail, setTrail] = useState<SingleTrail>({\r\n        city: undefined,\r\n        country: \"test\",\r\n        description: \"\",\r\n        difficulty: undefined,\r\n        directions: undefined,\r\n        features: undefined,\r\n        id: 0,\r\n        lat: \"0\",\r\n        length: \"test\",\r\n        lon: \"0\",\r\n        name: \"\",\r\n        rating: 0,\r\n        region: undefined,\r\n        thumbnail: undefined,\r\n        url: undefined\r\n    });\r\n    const [getWeather, setWeather] = useState<Weather>({\r\n        daily: [],\r\n        lat: 0,\r\n        lon: 0,\r\n        timezone: \"\",\r\n        timezone_offset: 0\r\n    })\r\n\r\n    useEffect(() => {\r\n        searchTrailByID(trailID)\r\n            .then(res => {\r\n                setTrail(res);\r\n\r\n                const lat: string = res.lat as string;\r\n                const lng: string = res.lon as string;\r\n\r\n                searchWeather(lat, lng)\r\n                    .then(res => setWeather(res))\r\n                    .catch(err => console.error(err))\r\n\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                window.location.assign(\"../PageNotFound\");\r\n            })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(getTrail)\r\n    // }, [getTrail])\r\n\r\n    // useEffect(() => {\r\n    //     console.log(getWeather)\r\n    // }, [getWeather])\r\n\r\n    const searchTrailByID = (trailID: string): Promise<SingleTrail> => fetch(`https://trailapi-trailapi.p.rapidapi.com/trails/${trailID}`, {\r\n        \"method\": \"GET\",\r\n        \"headers\": {\r\n            \"x-rapidapi-host\": \"trailapi-trailapi.p.rapidapi.com\",\r\n            \"x-rapidapi-key\": `${'ab399b1f67mshf2552c3222ba6dfp1221c8jsn63f6ccf2572f'}`,\r\n        }\r\n    })\r\n        .then((response) => response.json())\r\n        .then(res => res.data[0] as SingleTrail);\r\n\r\n    const searchWeather = (lat: string = \"0\", lon: string = \"0\"): Promise<Weather> => fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=${'current,minutely,hourly,alerts'}&units=${'imperial'}&appid=${'22bb6e2db366aab8539ac22df7b32d3a'}`)\r\n        .then((response) => response.json())\r\n        .then(res => res as Weather);\r\n\r\n    const stringReplaceBrake = (x: string | undefined) => {\r\n        if (x === undefined) {\r\n            return\r\n        } else {\r\n            let output: string = x as string;\r\n            return output.replace(/<br \\/>/g, \"\").replace(/ {2}/g, \" \");\r\n        }\r\n    }\r\n\r\n    const timeConverter = (UNIX_timestamp: number) => {\r\n        const a = new Date(UNIX_timestamp * 1000);\r\n        // const year = a.getFullYear();\r\n        // const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        // const month = months[a.getMonth()];\r\n        const date = a.getDate();\r\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat'];\r\n        const day = days[a.getDay()];\r\n        // const hour = a.getHours();\r\n        // const min = a.getMinutes();\r\n        // const sec = a.getSeconds();\r\n        return `${day} ${date}`;\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"MapContainer\">\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: `${'AIzaSyDTHB9JTUl-71YWUybeheSoTwrLN8X82ok'}` }}\r\n                defaultCenter={{ lat: 37.42216, lng: -122.08427 }}\r\n                center={{ lat: parseFloat(getTrail.lat as string), lng: parseFloat(getTrail.lon as string) }}\r\n                defaultZoom={12}\r\n            >\r\n                <LocationPin\r\n                    lat={parseFloat(getTrail.lat as string)}\r\n                    lng={parseFloat(getTrail.lon as string)}\r\n                    text={getTrail.name}\r\n                />\r\n            </GoogleMapReact>\r\n        </div>\r\n        <div className=\"resultParent bottom-container\">\r\n            <div className=\"resultHeader\">\r\n                <h2>{getTrail.name}</h2>\r\n            </div>\r\n            <div className=\"resultInformation font-white\">\r\n                <div style={{ padding: \"0.75em\" }}>\r\n                    {(getTrail.thumbnail) ? <img\r\n                        src={getTrail.thumbnail}\r\n                        alt={`Thumbnail for ${getTrail.name}`}\r\n                        width=\"100%\"\r\n                        height=\"auto\"\r\n                    /> : <></>}\r\n                    {getTrail.city ? <p className=\"infolet\"><strong>Nearest City: </strong>{getTrail.city}</p> : <></>}\r\n                    {getTrail.region ? <p className=\"infolet\"><strong>Region: </strong>{getTrail.region}</p> : <></>}\r\n                    {getTrail.difficulty ? <p className=\"infolet\"><strong>Difficulty: </strong>{getTrail.difficulty}</p> : <></>}\r\n                </div>\r\n                <div style={{ display: \"inline-block\" }}>\r\n                    <h3 className=\"margin-2\">Description</h3>\r\n                    <p className=\"margin-1\">{stringReplaceBrake(getTrail.description)}</p>\r\n                    {(getTrail.directions) ? <>\r\n                        <h3 className=\"margin-2\">Where is the trail head?</h3>\r\n                        <p className=\"margin-1\">{stringReplaceBrake(getTrail.directions)}</p>\r\n                    </> : <></>}\r\n                    {(getTrail.features) ? <>\r\n                        <h3 className=\"margin-2\">Features</h3>\r\n                        <p className=\"margin-1\">{stringReplaceBrake(getTrail.features)}</p>\r\n                    </> : <></>}\r\n                </div>\r\n\r\n            </div>\r\n            {getTrail.url ?\r\n                <div style={{ textAlign: \"center\" }}>\r\n                    <a\r\n                        href={getTrail.url}\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer noopener\"\r\n                        className=\"resultButton button-tweaks\"\r\n                    >More Information</a>\r\n                </div>\r\n                : <></>}\r\n        </div>\r\n        <div className=\"resultParent bottom-container\">\r\n            <div className=\"resultHeader\">\r\n                <h2>Weather Forecast</h2>\r\n            </div>\r\n            <div className=\"resultContainer\">\r\n                {(getWeather.daily.length > 0) ? getWeather.daily.map(item => {\r\n                    return (\r\n                        <div className=\"weather-card\">\r\n                            <p\r\n                                style={{ fontSize: \"1.25em\" }}\r\n                            ><strong>{timeConverter(item.dt)}</strong></p>\r\n                            <img\r\n                                src={`https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`}\r\n                                alt={item.weather[0].description}\r\n                                height=\"100px\"\r\n                                width=\"100px\"\r\n                            />\r\n                            <p><strong>{Math.ceil(item.temp.max)}°F</strong> <span>{Math.floor(item.temp.min)}°F</span></p>\r\n                        </div>\r\n                    )\r\n                }) : <></>}\r\n            </div>\r\n        </div>\r\n        <div style={{ padding: \"0.5em 0 1.5em 0\" }}>\r\n            <Link className=\"resultButton button-tweaks\" to=\"/\">Go Back Home</Link>\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default TrailDetail","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction PageNotFound() {\r\n\r\n\r\n    return (\r\n        <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-evenly\" }}>\r\n            <p style={{ color: \"white\", fontWeight: 600 }} >Page not Found</p>\r\n            <Link style={{color: \"white\"}} to=\"/\">Go Back Home</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageNotFound","import React from 'react';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Home from './pages/home';\nimport TrailDetail from './pages/trail';\nimport PageNotFound from './pages/notFound';\nimport './App.css';\n\nfunction App() {\n  return (<>\n    <header>\n      <div className=\"header_footer_container\">\n        <h1>Trail Scout</h1>\n      </div>\n    </header>\n    <div className=\"App\">\n      <div className=\"Main\">\n        <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/trail/:trailsID\" component={TrailDetail} />\n            <Route path=\"/PageNotFound\" component={PageNotFound} />\n          </Switch>\n        </HashRouter>\n      </div>\n    </div>\n    <footer>\n      <div className=\"header_footer_container footer\">\n        <a\n          href=\"https://github.com/markkhoo/Trail-Scout-v2\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >GitHub</a>\n        <p>Made with <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noreferrer noopener\">React</a></p>\n      </div>\n    </footer>\n  </>)\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}